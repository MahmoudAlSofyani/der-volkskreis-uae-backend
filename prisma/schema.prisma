generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleNames {
  ADMIN
  MEMBER
  ACTIVE
  INACTIVE
  PURGED
  WOLFSBURG
}

model Role {
  name    String   @id
  members Member[]
}

model Member {
  id             String          @id @default(uuid())
  firstName      String
  lastName       String
  emailAddress   String
  mobileNumber   String
  whatsAppNumber String          @default("null")
  instagramName  String          @default("null")
  password       String
  browniePoints  Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  /// @onDelete(CASCADE)
  cars           Car[]
  roles          Role[]
  /// @onDelete(CASCADE)
  events         Event[]
  comments       Comment[]
  posts          Post[]
  eventStatuses  EventStatus[]
  adverts        Advertisement[]
  profilePicture File?
  firstLogin     Boolean         @default(false)

}

model CarModel {
  id   Int    @id @default(autoincrement())
  name String
}

model CarColor {
  id   Int    @id @default(autoincrement())
  name String
}

model PlateEmirate {
  id         Int         @id @default(autoincrement())
  name       String
  plateCodes PlateCode[]
}

model PlateCode {
  id             Int          @id @default(autoincrement())
  name           String
  plateEmirate   PlateEmirate @relation(fields: [plateEmirateId], references: [id])
  plateEmirateId Int

}

model Car {
  id           String @id @default(uuid())
  carModel     String
  carColor     String
  carYear      String
  plateEmirate String
  plateCode    String
  plateNumber  String
  vinNumber    String
  member       Member @relation(fields: [memberId], references: [id])
  memberId     String
}

model Event {
  id            String        @id @default(uuid())
  name          String
  date          DateTime
  meetingPoint  String
  meetingTime   String
  details       String        @db.Text
  members       Member[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  eventStatuses EventStatus[]
}

model EventStatus {
  id       String  @id @default(uuid())
  status   Boolean
  member   Member  @relation(fields: [memberId], references: [id])
  memberId String
  event    Event   @relation(fields: [eventId], references: [id])
  eventId  String
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  details   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String    @id @default(uuid())
  title       String
  comments    Comment[]
  description String    @db.Text
  member      Member    @relation(fields: [memberId], references: [id])
  memberId    String
  createdAt   DateTime  @default(now())

}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

}

model File {
  id              String         @id @default(uuid())
  filename        String
  advert          Advertisement? @relation(fields: [advertisementId], references: [id])
  advertisementId String?
  member          Member?        @relation(fields: [memberId], references: [id])
  memberId        String?
  type            String
}

model Advertisement {
  id          String  @id @default(uuid())
  price       Decimal
  title       String
  description String  @db.Text
  verified    Boolean @default(false)
  sold        Boolean @default(false)
  image       File?
  member      Member  @relation(fields: [memberId], references: [id])
  memberId    String
}
