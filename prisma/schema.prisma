generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost:3306/test_dvu_db"
}

enum RoleNames {
  ADMIN
  MEMBER
  ACTIVE
  INACTIVE
  PURGED
  WOLFSBURG
}

model Role {
  name     RoleNames @default(INACTIVE)
  member   Member    @relation(fields: [memberId], references: [id])
  memberId String    @id
}

model Member {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  emailAddress   String
  mobileNumber   String
  whatsAppNumber String   @default("null")
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  /// @onDelete(CASCADE)
  cars           Car[]
  /// @onDelete(CASCADE)
  roles          Role[]
  /// @onDelete(CASCADE)
  events         Event[]
  /// @onDelete(CASCADE)
  posts          Post[]
}

model CarModel {
  id   Int    @id @default(autoincrement())
  name String
}

model CarColor {
  id   Int    @id @default(autoincrement())
  name String
}

model PlateEmirate {
  id         Int         @id @default(autoincrement())
  name       String
  plateCodes PlateCode[]
}

model PlateCode {
  id             Int          @id @default(autoincrement())
  name           String
  plateEmirate   PlateEmirate @relation(fields: [plateEmirateId], references: [id])
  plateEmirateId Int

}

model Car {
  id           String @id @default(uuid())
  carModel     String
  carColor     String
  carYear      String
  plateEmirate String
  plateCode    String
  plateNumber  String
  vinNumber    String @default("null")
  member       Member @relation(fields: [memberId], references: [id])
  memberId     String
}

model Event {
  id       String   @id @default(uuid())
  name     String
  date     DateTime
  attended Boolean
  member   Member   @relation(fields: [memberId], references: [id])
  memberId String
}

model Post {
  id         String   @id @default(uuid())
  body       String
  date       DateTime
  member     Member   @relation(fields: [memberId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  memberId   String
  categoryId String
}

model Category {
  id    String @id @default(uuid())
  name  String
  /// @onDelete(CASCADE)
  posts Post[]
}
